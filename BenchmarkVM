import libvirt
import csv
import datetime as dt
import time
import tkinter as tk
from tkinter import ttk
import threading

class Benchmark:
    def __init__(self, vm_names, measurement_time, measurement_interval):
        # Inicializa a classe Benchmark com nomes de VMs, tempo total de medição e intervalo entre medições.
        self.vm_names = vm_names
        self.measurement_time = measurement_time
        self.measurement_interval = measurement_interval
        self.stats = {}
        self.rows = []
        self.progress = 0
        self.monitoring = False
        self.cpu_threshold = 80 * 1e9  # Exemplo de limite de uso de CPU em nanosegundos
        self.mem_threshold = 1e9  # Exemplo de limite de uso de memória em bytes

    def write_csv(self, filename, headers, rows):
        # Escreve as estatísticas coletadas em um arquivo CSV.
        try:
            with open(filename, 'w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(headers)
                writer.writerows(rows)
        except Exception as e:
            print(f'Erro ao escrever arquivo {filename}: {e}')

    def gather_vm_stats(self, vm):
        # Coleta estatísticas de CPU, memória e disco de uma VM específica.
        stats_cpu = vm.getCPUStats(True)
        stats_mem = vm.memoryStats()
        stats_disk = vm.blockStats("vda")
        return {
            "VM": vm.name(),
            "Horário de Medição": dt.datetime.now().strftime("%H:%M:%S"),
            "Tempo de CPU (ns)": stats_cpu[0]['cpu_time'],
            "Tempo de Sistema (ns)": stats_cpu[0]['system_time'],
            "Tempo de Usuário (ns)": stats_cpu[0]['user_time'],
            "Memória Alocada (B)": stats_mem.get("actual", 0),
            "Memória Não Utilizada (B)": stats_mem.get("unused", 0),
            "Memória Disponível (B)": stats_mem.get("available", 0),
            "Memória Usável (B)": stats_mem.get("usable", 0),
            "Caches de Disco (B)": stats_mem.get("disk_caches", 0),
            "Espaço em Disco Alocado (B)": stats_disk[0],
            "Espaço em Disco Livre (B)": stats_disk[1],
            "Leituras de Disco": stats_disk[2],
            "Escritas de Disco": stats_disk[3]
        }

    def print_stats_to_terminal(self):
        # Imprime as estatísticas coletadas no terminal.
        print("Estatísticas coletadas:")
        for vm_name, vm_stats in self.stats.items():
            print(f"\n{vm_name}:")
            for key, value in vm_stats.items():
                print(f"{key}: {value}")

    def check_alerts(self, vm_stats):
        # Verifica se alguma estatística ultrapassa os limites definidos e envia alertas.
        if vm_stats['Tempo de CPU (ns)'] > self.cpu_threshold:
            self.send_alert(f"Alerta: Uso elevado de CPU na VM {vm_stats['VM']}")
        if vm_stats['Memória Alocada (B)'] > self.mem_threshold:
            self.send_alert(f"Alerta: Uso elevado de Memória na VM {vm_stats['VM']}")

    def send_alert(self, message):
        # Envia um alerta (por exemplo, imprime uma mensagem de alerta no terminal).
        print(message)
        # Aqui você pode adicionar código para enviar o alerta, como e-mail ou notificação na GUI.

    def start_real_time_monitoring(self, progress_var, callback):
        # Inicia o monitoramento em tempo real das VMs.
        def update_stats():
            try:
                conn = libvirt.open('qemu:///system')
            except libvirt.libvirtError as e:
                print(f'Erro ao abrir conexão com qemu:///system: {e}')
                return

            try:
                vms = [conn.lookupByName(name) for name in self.vm_names]
                headers = list(self.gather_vm_stats(vms[0]).keys())
            except libvirt.libvirtError as e:
                print(f'Erro ao localizar a VM: {e}')
                return

            try:
                total_measurements = (self.measurement_time // self.measurement_interval) * len(vms)
                measurement_count = 0

                while self.monitoring:
                    for vm in vms:
                        vm_stats = self.gather_vm_stats(vm)
                        self.stats[vm.name()] = vm_stats
                        self.rows.append(vm_stats)
                        self.check_alerts(vm_stats)
                        measurement_count += 1
                        self.progress = (measurement_count / total_measurements) * 100
                        progress_var.set(self.progress)
                        time.sleep(self.measurement_interval)

            except Exception as e:
                print(f'Ocorreu um erro: {e}')
            finally:
                conn.close()
                self.print_stats_to_terminal()
                print("Monitoramento em tempo real concluído com sucesso!")
                callback()

        self.monitoring = True
        self.monitor_thread = threading.Thread(target=update_stats)
        self.monitor_thread.start()

    def stop_real_time_monitoring(self):
        # Para o monitoramento em tempo real.
        self.monitoring = False
        self.monitor_thread.join()

class BenchmarkGUI:
    def __init__(self, root, benchmark):
        # Inicializa a interface gráfica com o Tkinter e configura os widgets.
        self.root = root
        self.benchmark = benchmark
        self.progress_var = tk.DoubleVar()
        self.create_widgets()

    def create_widgets(self):
        # Cria os botões e a barra de progresso.
        self.start_button = ttk.Button(self.root, text="Iniciar Monitoramento", command=self.start_monitoring)
        self.start_button.pack(pady=10)
        self.progress_bar = ttk.Progressbar(self.root, length=200, mode='determinate', variable=self.progress_var)
        self.progress_bar.pack(pady=10)
        self.stop_button = ttk.Button(self.root, text="Parar Monitoramento", command=self.stop_monitoring)
        self.stop_button.pack(pady=10)

    def start_monitoring(self):
        # Inicia o monitoramento quando o botão "Iniciar Monitoramento" é pressionado.
        self.start_button.config(state=tk.DISABLED)
        self.benchmark.start_real_time_monitoring(self.progress_var, self.enable_start_button)

    def stop_monitoring(self):
        # Para o monitoramento quando o botão "Parar Monitoramento" é pressionado.
        self.benchmark.stop_real_time_monitoring()
        self.enable_start_button()

    def enable_start_button(self):
        # Habilita o botão "Iniciar Monitoramento".
        self.start_button.config(state=tk.NORMAL)

# Criando janela principal Tkinter
root = tk.Tk()
root.title("Monitoramento em Tempo Real")

# Configurando e iniciando o benchmark
vm_names = ["java11", "java8"]
measurement_time = 60  # 1 minuto para teste
measurement_interval = 2
benchmark = Benchmark(vm_names, measurement_time, measurement_interval)
app = BenchmarkGUI(root, benchmark)

# Inicia o loop do Tkinter
root.mainloop()
